{
    "title": "BulkSMS JSON",
    "description": "## Overview\n\nThe JSON REST API allows you to submit and receive [BulkSMS](https://www.bulksms.com/) messages. You can also get access to past messages and see your account profile.\n\nThe base URL to use for this service is `https://api.bulksms.com/v1`.  The base URL cannot be used on its own; you must append a path that identifies an operation and you may have to specify some path parameters as well.\n\n[Click here](/) to go to the main BulkSMS developer site.\n\nIn order to give you an idea on how the API can be used, some JSON snippets are provided below.  Have a look at the [messages section](#tag/Message) for more information.\n\nProbably the most simple example\n\n```\n{\n    \"to\": \"+27001234567\",\n    \"body\": \"Hello World!\"\n}\n```\n\n\nYou can send unicode automatically using the `auto-unicode` query parameter. \nAlternatively, you can specify UNICODE in the request body. Here is an example that sets the `encoding` explicitly\n\n```\n{\n  \"to\": \"+27001234567\",\n  \"body\": \"Dobra prace! Jak se mas?\",\n  \"encoding\": \"UNICODE\"\n}\n```\n\nYou can also specify a from number\n\n```\n{\n    \"from\": \"+27007654321\",\n    \"to\": \"+27001234567\",\n    \"body\": \"Hello World!\"\n}\n```\n\nSimilar to above, but repliable\n\n```\n{\n    \"from\": { \"type\": \"REPLIABLE\" },\n    \"to\": \"+27001234567\",\n    \"body\": \"Hello World!\"\n}\n```\n\nA message to a group called Everyone\n\n```\n{\n    \"to\": { \"type\": \"GROUP\", \"name\": \"Everyone\" },\n    \"body\": \"Hello World!\"\n}\n```\n\nA message to multiple recipients\n\n```\n{\n    \"to\": [\"+27001234567\", \"+27002345678\", \"+27003456789\"],\n    \"body\": \"Happy Holidays!\"\n}\n```\n\nSending more than one message in the same request\n\n```\n[\n    {\n        \"to\": \"+27001234567\",\n        \"body\": \"Hello World!\"\n    },\n    {\n        \"to\": \"+27002345678\",\n        \"body\": \"Hello Universe!\"\n    }\n]\n```\n\n**The insecure base URL `http://api.bulksms.com/v1` is deprecated** and may in future result in a `301` redirect response, or insecure requests may be rejected outright. Please use the secure (`https`) URI above.\n\n### HTTP Content Type\n\nAll API methods expect requests to supply a `Content-Type` header with the value `application/json`. All responses will have the `Content-Type` header set to `application/json`.\n\n### JSON Formatting\n\nYou are advised to format your JSON resources according to strict JSON format rules. While the API does attempt to parse strictly invalid JSON documents, doing so may lead to incorrect interpretation and unexpected results.\n\nGood JSON libraries will produce valid JSON suitable for submission, but if you are manually generating the JSON text, be careful to follow the JSON format. This include correct escaping of control characters and double quoting of property names.\n\nSee the [JSON specification](https://tools.ietf.org/html/rfc4627) for further information.\n\n### Date Formatting\n\nDates are formatted according to ISO-8601, such as `1970-01-01T10:00:00+01:00` for 1st January 1970, 10AM UTC+1.\n\nSee the [Wikipedia ISO 8601 reference](https://en.wikipedia.org/wiki/ISO_8601) for further information.\n\nSpecifically, calendar dates are formatted with the 'extended' format `YYYY-MM-DD`. Basic format, week dates and ordinal dates are not supported. Times are also formatted in the 'extended' format `hh:mm:ss`. Hours, minutes and seconds are mandatory. Offset from UTC must be provided; this is to ensure that there is no misunderstanding regarding times provided to the API.\n\nThe format we look for is `yyyy-MM-ddThh:mm:ss[Z|[+-]hh:mm]`\n\nExamples of valid date/times are`2011-12-31T12:00:00Z` `2011-12-31T12:00:00+02:00`\n\n### Entity Format Modifications\n\nIt is expected that over time some changes will be made to the request and response formats of various methods available in the API.\nWhere possible, these will be implemented in a backwards compatible way.\nTo make this possible you are required to ignore unknown properties.\nThis enables the addition of information in response documents while maintaining compatibility with older clients.\n\n### Optional Request Entity Properties\n\nThere are many instances where requests can be made without having to specify every single property allowable in the request format.\nAny such optional properties are noted as such in the documentation and their default value is noted.\n",
    "docsUrl": "",
    "url": "https://api.apis.guru/v2/specs/bulksms.com/1.0.0/swagger.json",
    "envVars": {},
    "credentials": {
        "fields": {
            "server": {
                "label": "Server",
                "viewClass": "SelectView",
                "model": [
                    "https://api.bulksms.com/v1",
                    "--- Custom URL"
                ],
                "required": true
            },
            "otherServer": {
                "label": "Custom Server URL",
                "viewClass": "TextFieldView"
            },
            "username": {
                "label": "Username (basicAuth)",
                "viewClass": "TextFieldView",
                "note": "The API uses HTTP Basic Auth for authentication.\n\nYou are requested to preemptively provide the `Authorization` header in your requests and not wait until the server has provided a `401 Unauthorized` response.\n\nDoing so will reduce the number of requests required to achieve your goal, which will improve overall performance.\n\nYou authenticate using either the username you supplied when you registered with [BulkSMS](https://www.bulksms.com) or with an _API Token_. API tokens can be created by logging into your account and visiting _My Account | Advanced | API Tokens_.\n\n__Important:__\n- Access to the [Webhooks API](#tag/Webhooks) requires a username and password and does not work with an API Token.\n- Where possible, use an API Token instead of the username and password when writing software against the API.\n\nWhether you use a username or an API Token, the values must be [Base64 encoded](https://en.wikipedia.org/wiki/Base64) before using it in the header.\nFor example, if the username is `Aladdin` and the password is `OpenSesame`, the unencoded header value is `Aladdin:OpenSesame`.  After encoding, the full header becomes\n\n```\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\n```\nWhen using an API token, the value to be encoded will be `<token-id>:<token-secret>`.  These values _before Base64 encoding_ look something like this\n\n`\nBBDE1B476E03498AA768F66A286AABDC-01-B:9jSbVDK20!MXdfRGiIIFu#ffUE8*S\n`\n"
            },
            "password": {
                "label": "Password (basicAuth)",
                "viewClass": "TextFieldView",
                "note": "The API uses HTTP Basic Auth for authentication.\n\nYou are requested to preemptively provide the `Authorization` header in your requests and not wait until the server has provided a `401 Unauthorized` response.\n\nDoing so will reduce the number of requests required to achieve your goal, which will improve overall performance.\n\nYou authenticate using either the username you supplied when you registered with [BulkSMS](https://www.bulksms.com) or with an _API Token_. API tokens can be created by logging into your account and visiting _My Account | Advanced | API Tokens_.\n\n__Important:__\n- Access to the [Webhooks API](#tag/Webhooks) requires a username and password and does not work with an API Token.\n- Where possible, use an API Token instead of the username and password when writing software against the API.\n\nWhether you use a username or an API Token, the values must be [Base64 encoded](https://en.wikipedia.org/wiki/Base64) before using it in the header.\nFor example, if the username is `Aladdin` and the password is `OpenSesame`, the unencoded header value is `Aladdin:OpenSesame`.  After encoding, the full header becomes\n\n```\nAuthorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l\n```\nWhen using an API token, the value to be encoded will be `<token-id>:<token-secret>`.  These values _before Base64 encoding_ look something like this\n\n`\nBBDE1B476E03498AA768F66A286AABDC-01-B:9jSbVDK20!MXdfRGiIIFu#ffUE8*S\n`\n"
            }
        }
    },
    "triggers": {
        "startFlow": {
            "main": "./lib/triggers/startFlow.js",
            "type": "polling",
            "title": "Start Flow",
            "fields": {}
        }
    },
    "actions": {
        "get_messages": {
            "main": "./lib/actions/get_messages.js",
            "title": "Retrieve Messages",
            "description": "Retrieve the messages you have sent or received.\n\nAll the parameters are optional.  If a value is not supplied for `filter`, the messages are not filtered.\n\nMessages can be filtered by supplying query clauses in the `filter` parameter. Each clause has the form `name=value` where `name` is the name of a filter field and `value` is a valid value for that field.  A value for a field is optional. Include a clause for a field in the filter only when there is a need to fetch messages that match some value for that field.\nFor a numeric filter field, you can also use the less than operator (`<`).\n\nIf present, the filter value must have at least one clause, but it can contain a combination of clauses. Multiple clauses are separated with the `&` symbol.  Semantically, multiple clauses form a [logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\nFor example, if you want to list all messages that were sent as part of a particular submission, your filter contains two clauses and will look something like this\n```\ntype%3DSENT&submission.id%3D1-00000000000522347562\n```\nBecause `filter` is a request parameter, it is important to note that the value for this parameter must be *URL encoded*. In particular, the `=` encodes to `%3D` and the `&` encodes to `%26`.  Note that you do not have to encode the `<` character.\n\nUsing the previous example to illustrate; after encoding and encasing it, the clauses are transformed into a request that looks like this\n```\nGET /v1/messages?filter=type%3DSENT%26submission.id%3D1-00000000000522347562\n```\nIf the field name or the field value of a clause is not valid, a [bad_request error](errors#bad-request) is returned instead of the usual result.  The `detail` field of this error provides more information about the problem.\n\nThe table below lists the fields available for filtering\n\n| Field | Type   | Values | Note and example |\n|-------|------|--------------------|------|\n| id            | Integer  | Positive integer  | Use the `id` field with `<` (or with `>`) to fetch messages that are older (or newer) than those that are already fetched. <br/>`filter=id<123456` |\n| type          | String  | SENT, RECEIVED  | SENT are Mobile Terminating (MT) SMSs; RECEIVED are Mobile Originating (MO) SMSs.<br/>`filter=type%3DSENT` |\n| submission.id | String  |  | `filter=submission.id%3D1-00000000000522347562` |\n| status.type   | String  | ACCEPTED, SCHEDULED, SENT, DELIVERED, FAILED  | See the message `status.type` field for more information. <br/>`filter=status.type%3DDELIVERED` |\n| status.id| String  |  | See the message `status.id` field for more information. `filter=status.id%3DFAILED.EXPIRED`|\n| submission.date | String | Formatted Date | A fully specified date (e.g. 2017-01-01T10:00:00+01:00).  Use this field with `<=`, `<`, `>` or `>=` to limit the values. <br/>`filter=submission.date%3E%3D2017-01-01T10%3A00%3A00%2B01%3A00` |\n| userSuppliedId  | String | | Use a string value you specified in the `userSuppliedId` property when you sent the message. Only `SENT` messages will be retrieved. <br/>`filter=userSuppliedId%3Dacc009876` |\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_messages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "post_messages": {
            "main": "./lib/actions/post_messages.js",
            "title": "Send Messages",
            "description": "Send messages to one or more recipients.\n\n#### Repliability\n\nWhen a sent message is _repliable_,  the BulkSMS system can process an SMS response sent by your recipient.\n\nThe message sent by your customer is called a mobile originating (MO) message and would be available under `RECEIVED` messages. \nYou can obtain a list of MOs using the [retrieve messages API call](#tag/Message%2Fpaths%2F~1messages%2Fget).\nIn addition you can also get a list of the MOs that are associated with a specific sent message (see the [list related messages API call](#tag/Message%2Fpaths%2F~1messages~1%7Bid%7D~1relatedReceivedMessages%2Fget)).\n\nIf you use a specific _sender id_ in the `from` property of the send message, the message will not be repliable.\nIf you want a message to be repliable, you need to specify `REPLIABLE` in the `from.type` property.\n\nIf you do not set the `from` property, your account settings are considered to determine whether or not the message is repliable.\nIf the _default repliable_ setting on your account is _yes_ then the message will be repliable. \nIf this setting is _no_, the message will not be repliable.\n\n\n#### Body templates\n\nWhen sending a message you can use template fields to customise the message text.\n\n*Field based templates* allow you to create a message with place-holders for custom fields.  Fields are identified by a zero based index; the first field is `F0`, the second is `F1` and so on.  \n\nFor example, let's say you want to send a daily SMS message to all your clients that tell them what their current balance is.  The `body` of the message could look something like this \n\n```\nGood morning {F0######}, your balance is {F1######}\n```\n\nIn this message, the first field, `F0`, is the name  of the customer and he second field `F1` is the balance for that customer.  The `#` used to specify the maximum length  of the field.  Note that the maximum length allowed for the value includes the space taken by the braces, template name and hash symbol.  For example, the value `{F0#}` specifies a maximum length of `5`.  If the data is longer than this length, the data will be truncated when the message body is constructed.\n\nThe data fields are provided in the property named `fields` in the `to` element.  Here is a complete example of how this might look\n\n```\n{\n  \"body\": \"Good morning {F0######}, your balance is {F1######}\",\n  \"to\":  [\n      {\"address\": \"27456789\",\"fields\": [\"Harry\", \"$1345.23\"] },\n      {\"address\": \"27456785\",\"fields\": [\"Sally\", \"$2345.58\"] }\n  ]\n}\n```\n\nIf you are sending to contacts (or to groups) in your phonebook, you can use the *Phonebook based templates*.  These are similar to the templates described above, but they have specific names. The template for the contact's first name is identified by `fn` and the template for the contact's surname is identified by `sn`.  Below in an example that will work if the numbers are registered in your phonebook. \n\n```\n{\n  \"body\": \"Hi {fn######} {sn######}, have a great day!\",\n  \"to\":  [\n      {\"address\": \"27456789\" },\n      {\"address\": \"27456785\" }\n  ]\n}\n```\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/post_messages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_messages_send": {
            "main": "./lib/actions/get_messages_send.js",
            "title": "Send message using GET",
            "description": "A really simple interface for people who require a GET mechanism to submit a message.\n\nThe URI is interpreted as UTF-8.\n\n__Note__ BulkSMS recommends that you use the more flexible Send Messages Operation when submitting SMS messages from your application.\n\nHere is an example of a GET\n```http\nGET /v1/messages/send?to=%2b270000000&body=Hello%20World\n```\n\nYou can also use the same parameters to POST form encoded fields to `/messages`.\nHere is an example of a POST\n```http\nPOST /v1/messages\nContent-Type: application/x-www-form-urlencoded\n\nto=%2b27000000000&body=Hello+World\n```\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_messages_send.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_messages__id_": {
            "main": "./lib/actions/get_messages__id_.js",
            "title": "Show Message",
            "description": "Get a the message by `id`.\n```http\nGET /v1/messages/4023457654\n```\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_messages__id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_messages__id__relatedReceivedMessages": {
            "main": "./lib/actions/get_messages__id__relatedReceivedMessages.js",
            "title": "List Related Messages",
            "description": "Get the messages related to a sent message identified by `id`.\n\nFor more information how this work, see the `relatedSentMessageId` field in the message.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_messages__id__relatedReceivedMessages.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_profile": {
            "main": "./lib/actions/get_profile.js",
            "title": "Get profile",
            "description": "Returns information about your user profile",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_profile.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_webhooks": {
            "main": "./lib/actions/get_webhooks.js",
            "title": "List webhooks",
            "description": "Contains a list of your webhooks",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_webhooks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "post_webhooks": {
            "main": "./lib/actions/post_webhooks.js",
            "title": "Create a webhook",
            "description": "A webhook is an URL that you can register if you want the BulkSMS system to notify you about your messages.\nYou can create multiple webhooks, and each one will be called.\nIf you want to be notified of `SENT` messages and `RECEIVED` messages you need to create two webhooks.\n\n__Important:__ The Webhooks methods do not work with an API Token, a username and password is required.\n\n### Implementing your webhook\n\nWhen you implement your webhook, there are a few rules to be aware of:\n- Your webhook must process `POST` requests that contains an array of messages in the post body.  This input given to your webhook has the same structure as the output produced when you call [Retrieve Messages](#tag/Message%2Fpaths%2F~1messages%2Fget).\n- When you register or update your webhook, the URL will be tested by invoking it with an empty array (`[]`).\n- It is possible for your webhook to receive multiple updates for the same message and status. It happens from time to time that the mobile network duplicates status updates.\n- The order by which the webhook is invoked can be unexpected.  For example, if sender A replies before sender B, your webhook might get the reply from B first.\n- The webhook is expected to comply with good practices with regard to the status code it responds with.\n  - A status code in the `1xx` and `2xx` range is taken as an acknowledgement that the invocation was received and that the webhook host is ready to receive another.\n  - A status code in the `4xx` range is taken as a permanent problem and indicates that the webhook cannot process the message. The specific message that caused the error will be discarded, but your webhook will be invoked again when another message becomes available.\n  - Any other status code will be taken as a temporary problem; and indicates that the BulkSMS system should retry. The specific message that caused the error will not be discarded and your webhook will be invoked again with this message (see the subsequent section for more details on retry processing).\n- Your webhook has to respond within `30` seconds.  If no response is given in this time, the invocation will be retried.\n- It is good practise to add a secret to your URL in order to make it more secure. Here is an example:\n`https://www.example.com/hook.php?secret=pass763265word`\n- You can also use a non-standard port if necessary, for example: `https://www.example.com:8321/hook.php?secret=pass763265word`\n\n\n### The retry process\n\nThe process the BulkSMS systems follow to handle retries is roughly the following:\n- The first retry is scheduled for 90 seconds into the future.\n- After the first retry, subsequent failures will have longer delays, following this sequence - 3 minutes, 6 minutes, 12 minutes, 24 minutes, 48 minutes, 96 minutes, 3 hours, 6 hours, 12 hours, 24 hours.\n- When a failure occurs after the last delay in the sequence, the message is discarded.\n\n### Problem reports via email\n\nIt is strongly suggested that you provide an email address when you configure your webhook.\nAn email will be sent to this address to keep you in the loop whenever there are problems with your webhook.\nIn order to prevent your mailbox from being flooded, the BulksSMS system reports an observed error code no more than once in a 24 hour period.\n\nThe following emails can be expected\n - A __message retrying__ email is sent after an invocation has failed with a retry-able error.  This email is an early warning, allowing you to investigate your systems.\n - A __message discarded__ email is sent after failure email is send when a message is discarded as a consequence of a non-retry-able error; or when the system decides to stop retrying.\n",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/post_webhooks.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "delete_webhooks__id_": {
            "main": "./lib/actions/delete_webhooks__id_.js",
            "title": "Delete a webhook",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/delete_webhooks__id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "get_webhooks__id_": {
            "main": "./lib/actions/get_webhooks__id_.js",
            "title": "Read a webhook",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/get_webhooks__id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        },
        "post_webhooks__id_": {
            "main": "./lib/actions/post_webhooks__id_.js",
            "title": "Update a webhook",
            "fields": {
                "verbose": {
                    "viewClass": "CheckBoxView",
                    "label": "Debug this step (log more data)"
                }
            },
            "metadata": {
                "in": "./lib/schemas/post_webhooks__id_.in.json",
                "out": {
                    "type": "object"
                }
            }
        }
    }
}